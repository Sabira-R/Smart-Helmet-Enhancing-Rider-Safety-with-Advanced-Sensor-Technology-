#include <SoftwareSerial.h>
#include <Servo.h>

// Pin Definitions
const int headSensorPin = 4;
const int sideSensorPin = 5;
const int vibrationSensorPin = 6;
const int gasSensorPinA0 = A0;   // Gas Sensor Analog pin A0
const int gasSensorPinD0 = 9;    // Gas Sensor D0 pin connected to Digital Pin 9
const int sonarTrigPin = 2;
const int sonarEchoPin = 3;
const int buzzerPin = 10;        // Buzzer connected to digital pin 10
const int pushButtonPin = 11;
const int irSensorPin = 13;      // IR Sensor pin
const int servoPin = 12;         // Servo motor pin

// GSM Module Pins
const int simTxPin = 7;
const int simRxPin = 8;

// Set up software serial for GSM communication
SoftwareSerial gsmSerial(simTxPin, simRxPin); // RX, TX for SIM800 module


// Servo object
Servo myServo;


// IR sensor zero counter
int irZeroCount = 0;


// Flag to track if SMS has been sent for head sensor
bool headSensorSMSSent = false;


// Variables for cell tower information
String mcc, lac, cellId;


void setup() {
  Serial.begin(9600);        // Start Serial Monitor for debugging & manual commands
  gsmSerial.begin(9600);     // Start GSM serial communication


  pinMode(headSensorPin, INPUT);
  pinMode(sideSensorPin, INPUT);
  pinMode(vibrationSensorPin, INPUT);
  pinMode(gasSensorPinA0, INPUT);  
  pinMode(gasSensorPinD0, INPUT);  
  pinMode(sonarTrigPin, OUTPUT);
  pinMode(sonarEchoPin, INPUT);
  pinMode(buzzerPin, OUTPUT);    
  pinMode(pushButtonPin, INPUT);
  pinMode(irSensorPin, INPUT);


  myServo.attach(servoPin);  
  myServo.write(0); // default servo position


  // Initialize SIM800L and get cell tower information
  getCellTowerInfo();
}


void loop() {
  // ============= Manual Command Mode =============  
  // Forward data between Serial Monitor and GSM module
  if (Serial.available()) {
    char c = Serial.read();
    gsmSerial.write(c);  // send what you type in Serial Monitor to SIM800
  }
  if (gsmSerial.available()) {
    char c = gsmSerial.read();
    Serial.write(c);    // show SIM800 response in Serial Monitor
  }


  // ============= Sensors =============  
  int headSensorState = digitalRead(headSensorPin);
  int sideSensorState = digitalRead(sideSensorPin);
  int vibrationSensorState = digitalRead(vibrationSensorPin);
  int gasSensorStateA0 = analogRead(gasSensorPinA0);  
  int gasSensorStateD0 = digitalRead(gasSensorPinD0);
  int pushButtonState = digitalRead(pushButtonPin);
  int irSensorState = digitalRead(irSensorPin);


  // Head Sensor Logic (Send SMS only once when triggered)
  if (headSensorState == LOW && !headSensorSMSSent) {
    sendSMS("Head sensor triggered!");
    headSensorSMSSent = true;  // Set flag to true to prevent further SMS
  }


  // Side and Vibration Sensor Logic
  if (sideSensorState == LOW && vibrationSensorState == HIGH) {
    sendSMS("Side collision and vibration detected!");
  }


  // Gas Sensor Logic → Rotate Servo instead of buzzer
  if (gasSensorStateD0 == LOW) {  // Gas detected (Alcohol)
    myServo.write(90);  // rotate servo to 90°
    delay(1000);
    myServo.write(0);   // reset to 0°
    Serial.println("Gas detected! Servo rotated.");
  }


  // Sonar Logic (detect object within 25 cm)
  long distance = getDistance();
  if (distance < 5) {
    buzzBuzzerTwice();
  }


  // Push Button Logic
  if (pushButtonState == HIGH) {
    sendSMS("Push button pressed!");
  }


  // ================= IR Sensor Logic (7 consecutive 0s) =================
  if (irSensorState == LOW) {
    irZeroCount++;
    if (irZeroCount >= 7) {
      buzzBuzzer();
      Serial.println("IR sensor detected 0 seven times consecutively - Buzzer ON");
      irZeroCount = 0;  // reset after buzzing
    }
  } else {
    irZeroCount = 0; // reset if HIGH comes in between
  }


  delay(100); // small delay like your reference code
}


// ================= FUNCTIONS =================


// Function to send SMS using the GSM module
void sendSMS(String message) {
  gsmSerial.println("AT+CMGF=1");        
  delay(1000);
  gsmSerial.println("AT+CMGS=\"+8801400554400\"");  // Replace with your phone number
  delay(1000);


  // Send the error message as the SMS message
  String smsMessage = message + "\n\nCell Tower Info: \nMCC: " + mcc + "\nLAC: " + lac + "\nCell ID: " + cellId;
  gsmSerial.println(smsMessage);            
  delay(1000);
  gsmSerial.write(26);   // Ctrl+Z
  delay(1000);
  Serial.println("SMS sent: " + smsMessage);
}


// Function to buzz the buzzer
void buzzBuzzer() {
  digitalWrite(buzzerPin, HIGH);  
  delay(500);                      
  digitalWrite(buzzerPin, LOW);    
  delay(500);                      
  Serial.println("Buzzer activated");
}


// Function to buzz the buzzer twice
void buzzBuzzerTwice() {
  digitalWrite(buzzerPin, HIGH);  
  delay(500);                      
  digitalWrite(buzzerPin, LOW);    
  delay(1000);                    
  digitalWrite(buzzerPin, HIGH);  
  delay(500);                      
  digitalWrite(buzzerPin, LOW);    
  Serial.println("Buzzer buzzed twice (Sonar)");
}


// Function to get distance from sonar
long getDistance() {
  digitalWrite(sonarTrigPin, LOW);  
  delayMicroseconds(2);
  digitalWrite(sonarTrigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(sonarTrigPin, LOW);  


  long duration = pulseIn(sonarEchoPin, HIGH);
  long distance = (duration / 2) / 29.1;  
  return distance;
}


// Function to get cell tower information
void getCellTowerInfo() {
  gsmSerial.println("AT+CENG?");   // Get cell tower information (MCC, MNC, LAC, Cell ID)
  delay(1000);
  String response = "";
  while (gsmSerial.available()) {
    response += char(gsmSerial.read());  // Read the response from SIM800L
  }
 
  // Parse the response to extract MCC, LAC, and Cell ID (without MNC)
  if (response.indexOf("+CENG:") != -1) {
    int mccStart = response.indexOf("\"") + 1;
    int mccEnd = response.indexOf("\"", mccStart);
    mcc = response.substring(mccStart, mccEnd);


    int lacStart = response.indexOf("\"", mccEnd + 1) + 1;
    int lacEnd = response.indexOf("\"", lacStart);
    lac = response.substring(lacStart, lacEnd);


    int cellIdStart = response.indexOf("\"", lacEnd + 1) + 1;
    int cellIdEnd = response.indexOf("\"", cellIdStart);
    cellId = response.substring(cellIdStart, cellIdEnd);
   
    // Print the cell tower info for debugging
    Serial.println("Cell Tower Info:");
    Serial.print("MCC: ");
    Serial.println(mcc);
    Serial.print("LAC: ");
    Serial.println(lac);
    Serial.print("Cell ID: ");
    Serial.println(cellId);
  }
}





